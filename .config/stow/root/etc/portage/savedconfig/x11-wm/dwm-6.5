// colors
#define COL_BLACK "#000000"
#define COL_GREY  "#808080"
#define COL_WHITE "#ffffff"

#define COL_ACCENT_DARKER "#004fe1"
#define COL_ACCENT_DARK "#08a1f7"
#define COL_ACCENT_LIGHT "#03c1f4"
#define COL_ACCENT_LIGHTER "#09e0fe"

// global properties
static const int showbar = 1; // show status bar
static const int topbar = 0;  // status bar position - 0 bottom, 1 top

static const unsigned int borderpx = 2; // border px of windows
static const unsigned int gappx = 16;	// gap pixel between windows
static const unsigned int snap = 32;	// snap pixel

static const char *fonts[] = {"Hack Nerd Font:size=8"};

// dmenu properties -- wip
static char dmenumon[2] = "0"; // required by dwm spawn for dmenu
static const char dmenufont[] = "Hack Nerd Font:size=8";
static const char dmenuBg[] = COL_BLACK;
static const char dmenuBgSelected[] = COL_ACCENT_DARKER;
static const char dmenuFg[] = COL_WHITE;
static const char dmenuFgSelected[] = COL_WHITE;

// window colors
static const char *colors[][3] = {
	// [scheme] = 	{ fg, 					bg, 					border }
	[SchemeNorm] = 	{ COL_WHITE,			COL_BLACK,				COL_BLACK },			   // for all windows not selected
	[SchemeInac] = 	{ COL_WHITE, 			COL_ACCENT_LIGHT, 		COL_BLACK },			   // for all windows not selected
	[SchemeSel] = 	{ COL_WHITE, 			COL_ACCENT_DARKER, 		COL_ACCENT_DARK}, 			// for all selected windows
};

// tagging
static const char *tags[] = {"1", "2", "3", "4", "5", "6", "7", "8", "9"};

// layouts
static const float mfact = 0.5;		 // master area size
static const int nmaster = 1;		 // number of clients per master area
static const int resizehints = 1;	 // show resize hints
static const int lockfullscreen = 1; // force focus on full screen clients

static const Layout layouts[] = {
	// symbol, layout
	{"", 	tile}, 	// default -- tiling to right and below
	{"î«£", 	NULL}, 	// floating layout
};

// window rules
static const Rule rules[] = {
	// class, 				instance, 		title, 			tags mask,		isfloating,		isstyled,		monitor
	{ "st-256color", 		NULL, 			NULL, 			0, 				0, 				1, 				-1 },

	// xprop | awk '/^WM_CLASS/{sub(/.* =/, "instance:"); sub(/,/, "\nclass:"); print} /^WM_NAME/{sub(/.* =/, "title:"); print}'
};

// key definition
#define SHIFT ShiftMask	 // Shift key
#define CAPS LockMask	 // Caps lock
#define CTRL ControlMask // Control key
#define ALT Mod1Mask	 // Alt key
#define NUM Mod2Mask	 // Num lock
#define SCROLL Mod3Mask	 // Scroll lock
#define SUPER Mod4Mask	 // Windows key

// applications definition
#define SHCMD(cmd) { .v = (const char *[]) { "sh", "-c", cmd, NULL } }	  // for spawning shell commands
#define TERMCMD(cmd) { .v = (const char *[]) { "st", "-e", cmd, NULL } }  // for spawning shell commands

static const char *termcmd[] = { "st", NULL };
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", dmenuBg, "-nf", dmenuFg, "-sb", dmenuBgSelected, "-sf", dmenuFgSelected, NULL };

// tag interactions definition
#define TAGKEYS(KEY, TAG)                                                                                          									\
	{ SUPER, 					KEY, 						view, 				{.ui = 1 << TAG} }, /* super + num -- move to tag */                \
	{ SUPER | SHIFT, 			KEY, 						tag, 				{.ui = 1 << TAG} }, /* super + shift + num -- move window to tag */ \
	{ SUPER | CTRL | SHIFT, 	KEY, 						tagnextmon, 		{.ui = 1 << TAG} }, /* super + ctrl + shift + num -- move window to tag on next monitor */
#define ALLTAGS	 /* define key binding interactions for all the tags */ \
	TAGKEYS(XK_1, 0)													\
	TAGKEYS(XK_2, 1)													\
	TAGKEYS(XK_3, 2)													\
	TAGKEYS(XK_4, 3)													\
	TAGKEYS(XK_5, 4)													\
	TAGKEYS(XK_6, 5)													\
	TAGKEYS(XK_7, 6)													\
	TAGKEYS(XK_8, 7)													\
	TAGKEYS(XK_9, 8)

// kbindings / shortcuts
static const Key keys[] = {
	// type						modifier					key					function / argument

	// applications
	{ SUPER,					XK_r,						spawn,				{.v = dmenucmd} },					// super + r -- dmenu
	{ SUPER,					XK_Return,					spawn,				{.v = termcmd} },					// super + enter -- st
	{ SUPER | SHIFT,			XK_Return,					spawn,				TERMCMD("tmux") },					// super + shift + enter -- tmux
	{ SUPER,					XK_e,						spawn,				TERMCMD("fastfetch") },				// super + shift + e -- file explorer
	{ CTRL | SHIFT,				XK_Escape,					spawn,				TERMCMD("btop") },					// ctrl + shift + escape -- btop

	// functional
	{ 0,						XF86XK_AudioMute,			spawn,				SHCMD("toggle-volume") },			// toggle audio
	{ 0,						XF86XK_AudioLowerVolume,	spawn,				SHCMD("decrease-volume") },			// decrease volume level
	{ 0,						XF86XK_AudioRaiseVolume,	spawn,				SHCMD("increase-volume") },			// increase volume level
	{ 0,						XF86XK_AudioMicMute,		spawn,				SHCMD("toggle-mic") },				// toggle mic
	{ 0,						XF86XK_MonBrightnessDown,	spawn,				SHCMD("decrease-backlight") },		// decrease backlight level
	{ 0,						XF86XK_MonBrightnessUp,		spawn,				SHCMD("increase-backlight") },		// increase backlight level

	// layouts
	{ SUPER,					XK_f,						togglefloating,		{0} },								// super + f -- toggle floating
	{ SUPER | SHIFT,			XK_f,						setlayout,			{.v = &layouts[0]} },				// super + shift + f -- force tiling
	{ SUPER,					XK_b,						togglebar,			{0} },								// super + b -- toggle bar

	// navigation
	{ SUPER,					XK_Right,					viewnext,			{0} },								// super + right -- next desktop
	{ SUPER,					XK_Left,					viewprev,			{0} },								// super + left -- previous desktop
	{ SUPER | SHIFT,			XK_Right,					tagtonext,			{0} },								// super + shift + right -- move window to next desktop
	{ SUPER | SHIFT,			XK_Left,					tagtoprev,			{0} },								// super + shift + left -- move window to previous desktop
	{ SUPER,					XK_Up,						focusmon,			{.i = +1} },						// super + up -- next monitor
	{ SUPER,					XK_Down,					focusmon,			{.i = -1} },						// super + down -- previous monitor
	{ SUPER | SHIFT,			XK_Up,						tagnextmon,			{0} },								// super + shift + up -- move window to next monitor
	{ SUPER | SHIFT,			XK_Down,					tagprevmon,			{0} },								// super + shift + down -- move window to previous monitor

	// tags interactions
	ALLTAGS

	// windows
	{ SUPER,					XK_q,						killclient,			{0} },								// super + q -- kill window
	{ SUPER | SHIFT,			XK_q,						killall,			{0} },								// super + shift + q -- kill all windows
	{ SUPER,					XK_w,						killallseltag,		{0} },								// super + w -- kill all windows in selected tag
	{ SUPER | SHIFT,			XK_w,						killallunsel,		{0} },								// super + shift + w -- kill all windows except selected

	// system
	{ CTRL | ALT,				XK_Delete,					spawn,				SHCMD("refresh-system") },			// ctrl + alt + delete -- restart all services
	{ SUPER | SHIFT,			XK_c,						quit,				{0} },								// super + shift + c -- restart dwm
	{ CTRL | ALT,				XK_Return,					spawn,				SHCMD("doas reboot") },				// ctrl + alt + return -- reboot system
	{ CTRL | SHIFT | ALT,		XK_Return,					spawn,				SHCMD("doas shutdown -h now") },	// ctrl + shift + alt + return -- shutdown system

// wip
	{ SUPER,				XK_space,			focusstack,				{.i = +1}},	// super + space -- select next client in view
	{ ALT,					XK_Tab,			view,				{0}},	// alt + tab -- change tag
	{ SUPER,				XK_Tab,			focusmon,				{.i = +1}},	// super + tab -- change monitor


	// admin

	// type       	modifier                      key        function        argument
	// { SUPER,                       XK_j,      focusstack,     {.i = +1 } },
	// { SUPER,                       XK_k,      focusstack,     {.i = -1 } },
	{ SUPER,				XK_i,			incnmaster,				{.i = +1}},	
	{ SUPER,				XK_d,			incnmaster,				{.i = -1}},	
	{ SUPER,				XK_h,			setmfact,				{.f = -0.05}},	
	{ SUPER,				XK_l,			setmfact,				{.f = +0.05}},	
	// { SUPER,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	// { SUPER,                       XK_m,      setlayout,      {.v = &layouts[2]} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static const Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,				0,			Button1,				setlayout,	{0}},
	{ ClkLtSymbol,				0,			Button3,				setlayout,	{.v = &layouts[2]}},
	{ ClkWinTitle,				0,			Button2,				zoom,	{0}},
	{ ClkStatusText,				0,			Button2,				spawn,	{.v = termcmd}},
	{ ClkClientWin,				SUPER,			Button1,				movemouse,	{0}},
	{ ClkClientWin,				SUPER,			Button2,				togglefloating,	{0}},
	{ ClkClientWin,				SUPER,			Button3,				resizemouse,	{0}},
	{ ClkTagBar,				0,			Button1,				view,	{0}},
	{ ClkTagBar,				0,			Button3,				toggleview,	{0}},
	{ ClkTagBar,				SUPER,			Button1,				tag,	{0}},
	{ ClkTagBar,				SUPER,			Button3,				toggletag,	{0}},
};
