diff --git a/config.def.h b/config.def.h
index 09934d4..20a0793 100644
--- a/config.def.h
+++ b/config.def.h
@@ -89,6 +89,10 @@ static const Key keys[] = {
 	{ MODKEY|ShiftMask,				XK_q,	   killall,		   {0} },
 	{ MODKEY,						XK_w,	   killallseltag,  {0} },
 	{ MODKEY|ShiftMask,				XK_w,	   killallunsel,   {0} },
+	{ MODKEY,						XK_Right,  viewnext,	   {0} },
+	{ MODKEY,						XK_Left,   viewprev,	   {0} },
+	{ MODKEY|ShiftMask,				XK_Right,  tagtonext,	   {0} },
+	{ MODKEY|ShiftMask,				XK_Left,   tagtoprev,	   {0} },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
diff --git a/dwm.c b/dwm.c
index 4eca5c3..9e7cf04 100644
--- a/dwm.c
+++ b/dwm.c
@@ -191,9 +191,11 @@ static void maprequest(XEvent *e);
 static void monocle(Monitor *m);
 static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
+static unsigned int nexttag(void);
 static Client *nexttagged(Client *c);
 static Client *nexttiled(Client *c);
 static void pop(Client *c);
+static unsigned int prevtag(void);
 static void propertynotify(XEvent *e);
 static void quit(const Arg *arg);
 static Monitor *recttomon(int x, int y, int w, int h);
@@ -216,6 +218,8 @@ static void showhide(Client *c);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
+static void tagtonext(const Arg *arg);
+static void tagtoprev(const Arg *arg);
 static void tile(Monitor *m);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
@@ -235,6 +239,8 @@ static void updatetitle(Client *c);
 static void updatewindowtype(Client *c);
 static void updatewmhints(Client *c);
 static void view(const Arg *arg);
+static void viewnext(const Arg *arg);
+static void viewprev(const Arg *arg);
 static Client *wintoclient(Window w);
 static Monitor *wintomon(Window w);
 static int xerror(Display *dpy, XErrorEvent *ee);
@@ -1280,6 +1286,13 @@ movemouse(const Arg *arg)
 	}
 }
 
+unsigned int
+nexttag(void)
+{
+	unsigned int seltag = selmon->tagset[selmon->seltags];
+	return seltag == (1 << (LENGTH(tags) - 1)) ? 1 : seltag << 1;
+}
+
 Client *
 nexttagged(Client *c)
 {
@@ -1307,6 +1320,13 @@ pop(Client *c)
 	arrange(c->mon);
 }
 
+unsigned int
+prevtag(void)
+{
+	unsigned int seltag = selmon->tagset[selmon->seltags];
+	return seltag == 1 ? (1 << (LENGTH(tags) - 1)) : seltag >> 1;
+}
+
 void
 propertynotify(XEvent *e)
 {
@@ -1771,6 +1791,26 @@ tagmon(const Arg *arg)
 	sendmon(selmon->sel, dirtomon(arg->i));
 }
 
+void
+tagtonext(const Arg *arg)
+{
+	if (selmon->sel == NULL)
+		return;
+	unsigned int tmp = nexttag();
+	tag(&(const Arg){.ui = tmp});
+	view(&(const Arg){.ui = tmp});
+}
+
+void
+tagtoprev(const Arg *arg)
+{
+	if (selmon->sel == NULL)
+		return;
+	unsigned int tmp = prevtag();
+	tag(&(const Arg){.ui = tmp});
+	view(&(const Arg){.ui = tmp});
+}
+
 void
 tile(Monitor *m)
 {
@@ -2166,6 +2206,18 @@ view(const Arg *arg)
 	arrange(selmon);
 }
 
+void
+viewnext(const Arg *arg)
+{
+	view(&(const Arg){.ui = nexttag()});
+}
+
+void
+viewprev(const Arg *arg)
+{
+	view(&(const Arg){.ui = prevtag()});
+}
+
 Client *
 wintoclient(Window w)
 {
