diff --git a/config.def.h b/config.def.h
index 872aa30..09934d4 100644
--- a/config.def.h
+++ b/config.def.h
@@ -86,6 +86,9 @@ static const Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY|ShiftMask,				XK_q,	   killall,		   {0} },
+	{ MODKEY,						XK_w,	   killallseltag,  {0} },
+	{ MODKEY|ShiftMask,				XK_w,	   killallunsel,   {0} },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
diff --git a/dwm.c b/dwm.c
index ec019d4..4eca5c3 100644
--- a/dwm.c
+++ b/dwm.c
@@ -182,6 +182,9 @@ static void grabkeys(void);
 static void incnmaster(const Arg *arg);
 static void keypress(XEvent *e);
 static void killclient(const Arg *arg);
+static void killall(const Arg *arg);
+static void killallseltag(const Arg *arg);
+static void killallunsel(const Arg *arg);
 static void manage(Window w, XWindowAttributes *wa);
 static void mappingnotify(XEvent *e);
 static void maprequest(XEvent *e);
@@ -1045,20 +1048,60 @@ keypress(XEvent *e)
 			keys[i].func(&(keys[i].arg));
 }
 
+void
+killwin(const Window *win)
+{
+	XGrabServer(dpy);
+	XSetErrorHandler(xerrordummy);
+	XSetCloseDownMode(dpy, DestroyAll);
+	XKillClient(dpy, *win);
+	XSync(dpy, False);
+	XSetErrorHandler(xerror);
+	XUngrabServer(dpy);
+}
+
 void
 killclient(const Arg *arg)
 {
 	if (!selmon->sel)
 		return;
-	if (!sendevent(selmon->sel, wmatom[WMDelete])) {
-		XGrabServer(dpy);
-		XSetErrorHandler(xerrordummy);
-		XSetCloseDownMode(dpy, DestroyAll);
-		XKillClient(dpy, selmon->sel->win);
-		XSync(dpy, False);
-		XSetErrorHandler(xerror);
-		XUngrabServer(dpy);
-	}
+	if (!sendevent(selmon->sel, wmatom[WMDelete]))
+		killwin(&(selmon->sel->win));
+}
+
+void
+killall(const Arg *arg)
+{
+	Monitor *m;
+	Client *i;
+	for (m = mons; m; m = m->next)
+		for (i = m->clients; i; i = i->next)
+			if (!sendevent(i, wmatom[WMDelete]))
+				killwin(&(i->win));
+}
+
+void
+killallseltag(const Arg *arg)
+{
+	if (!selmon->sel)
+		return;
+	Client *i;
+	for (i = selmon->clients; i; i = i->next)
+		if (ISVISIBLE(i) && !sendevent(i, wmatom[WMDelete]))
+			killwin(&(i->win));
+}
+
+void
+killallunsel(const Arg *arg)
+{
+	if (!selmon->sel)
+		return;
+	Monitor *m;
+	Client *i;
+	for (m = mons; m; m = m->next)
+		for (i = m->clients; i; i = i->next)
+			if (i != selmon->sel && !sendevent(i, wmatom[WMDelete]))
+				killwin(&(i->win));
 }
 
 void
