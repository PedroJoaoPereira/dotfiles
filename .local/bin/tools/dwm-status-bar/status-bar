#!/bin/sh

# stores PID of status bar
mkdir -p ~/.cache
printf "$$" >~/.cache/status-bar-pid

# SIGNALLING
# to update it from external commands
## kill -m "$(cat ~/.cache/pidofbar)"
# where m = 34 + n
trap ". update-status-bar-audio ; . update-status-bar" "RTMIN+0"     # m = 34, update audio
trap ". update-status-bar-backlight ; . update-status-bar" "RTMIN+1" # m = 35, update backlight

# initialize bar with values
. update-status-bar-weather
# . update-status-bar-cpu
# . update-status-bar-memory
# . update-status-bar-disk
. update-status-bar-audio
. update-status-bar-backlight
. update-status-bar-energy
. update-status-bar-connection
. update-status-bar-time
. update-status-bar

THIS_WAIT_INTERVAL=30
THIS_MIN_COUNTER=0
while true; do
	sleep $THIS_WAIT_INTERVAL &
	wait && {
		# restart after one hour
		if [ $(($THIS_MIN_COUNTER % (60 * 60 / $THIS_WAIT_INTERVAL))) -eq 0 ]; then
			let THIS_MIN_COUNTER=0
		fi

		# update weather every 20 minutes
		if [ $(($THIS_MIN_COUNTER % (20 * 60 / $THIS_WAIT_INTERVAL))) -eq 0 ]; then
			. update-status-bar-weather
		fi

		# update cpu every 30 seconds
		# if [ $(($THIS_MIN_COUNTER % (30 / $THIS_WAIT_INTERVAL))) -eq 0 ]; then
		# 	. update-status-bar-cpu
		# fi

		# update memory every 30 seconds
		# if [ $(($THIS_MIN_COUNTER % (30 / $THIS_WAIT_INTERVAL))) -eq 0 ]; then
		# 	. update-status-bar-memory
		# fi

		# update disk every hour
		# if [ $(($THIS_MIN_COUNTER % (60 * 60 / $THIS_WAIT_INTERVAL))) -eq 0 ]; then
		# 	. update-status-bar-disk
		# fi

		# update energy every 30 seconds
		if [ $(($THIS_MIN_COUNTER % (30 / $THIS_WAIT_INTERVAL))) -eq 0 ]; then
			. update-status-bar-energy
		fi

		# update connection every 30 seconds
		if [ $(($THIS_MIN_COUNTER % (30 / $THIS_WAIT_INTERVAL))) -eq 0 ]; then
			. update-status-bar-connection
		fi

		# update time every minute
		if [ $(($THIS_MIN_COUNTER % (60 / $THIS_WAIT_INTERVAL))) -eq 0 ]; then
			. update-status-bar-time
		fi

		# update display every interval
		. update-status-bar

		let THIS_MIN_COUNTER+=1
	}
done
